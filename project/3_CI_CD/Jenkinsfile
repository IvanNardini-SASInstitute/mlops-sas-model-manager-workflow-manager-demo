// Jenkinsfile testing test
pipeline {
    agent none
    stages {
        // stage('Build') {
        //     agent {
        //         docker {
        //             image 'python:2-alpine'
        //         }
        //     }
        //     steps {
        //         sh 'python -m py_compile project/2_DevLab/experiment_rfor/score.py'
        //     }
        // }
        stage('Code Quality Test') {

            agent {
                docker {
                    image 'in92/devops_pylint:v1.3' 
                }
            }

            steps {
                // Nicetohave: rewrite parallel
                parallel(

                score_code: {
                    sh 'pylint --disable=C project/2_DevLab/experiment_rfor/score.py'
                },
                train_code: {
                    sh 'pylint --disable=C project/2_DevLab/experiment_rfor/train.py'
                }

                )
            }

            post {

                success {
                        echo 'Score and Train code files successfully validated!'
                    }

                failure {
                        echo 'Code failed the quality test, please see logs.'
                    }
            }
        }

        stage('Code Validation Test') {

            parallel {

                stage('Validate Train Code') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh 'python -m py_compile project/2_DevLab/experiment_rfor/train.py'
                    }
                }

                stage('Validate Score Code') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh 'python -m py_compile project/2_DevLab/experiment_rfor/score.py'
                    }
                }
            }
        }

        // stage('Unit Test') {
        // }

        stage('MetaData Quality Test') {

            // Nicetohave: Add some output message when it's ok and logs
            // Nicetohave: rewrite parallel

            agent any

            steps{

                parallel(

                    fileMetadata_test: {

                        script {
                            try {
                                readJSON file: 'project/2_DevLab/experiment_rfor/fileMetadata.json'
                            } catch (Exception e) {
                                echo "Caught: ${e} JSON not valid!"
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    },

                    inputVar_test: {
                        
                        script {
                            try {
                                readJSON file: 'project/2_DevLab/experiment_rfor/inputVar.json'
                            } catch (Exception e) {
                                echo "Caught: ${e} JSON not valid!"
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    },

                    outputVar_test: {
                        
                        script {
                            try {
                                readJSON file: 'project/2_DevLab/experiment_rfor/outputVar.json'
                            } catch (Exception e) {
                                echo "Caught: ${e} JSON not valid!"
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }

                )
            }

            post {

                success {
                        echo 'The required JSON files are correct!'
                    }

                failure {
                        echo 'JSON files failed the quality test, please see review them.'
                    }
            }
        }

        // stage('SAS Model Manager Repository service') {
        // }
    }
}