// Jenkinsfile testing test
pipeline {
    agent none
    stages {

        stage('Code Quality Test') {

            parallel{

                    stage('Score Code Quality Test') {

                        agent {
                            docker {
                                image 'in92/devops_pylint:v1.3' 
                            }
                        }

                        steps{
                            sh 'pylint --disable=C,R,W project/2_DevLab/experiment_rfor/score.py'
                        }
                    }

                    stage('Train Code Quality Test') {

                        agent {
                            docker {
                                image 'in92/devops_pylint:v1.3' 
                            }
                        }

                        steps{
                            sh 'pylint --disable=C project/2_DevLab/experiment_rfor/train.py'
                        }
                    }

                }

            post {

                success {
                        echo 'Score and Train code files successfully passed the Code Quality Test!'
                    }

                failure {
                        echo 'Code failed the quality test, please see logs.'
                    }
            }
        }

        stage('Code Validation Test') {

            parallel {

                stage('Validate Train Code') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh 'python -m py_compile project/2_DevLab/experiment_rfor/train.py'
                    }
                }

                stage('Validate Score Code') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh 'python -m py_compile project/2_DevLab/experiment_rfor/score.py'
                    }
                }
            }

            post {

                success {
                        echo 'Score and Train code files successfully validated!'
                    }

                failure {
                        echo 'Code failed the Validation test, please see logs.'
                    }
            }
        }

        stage('Unit Test') {

            agent {
                docker {
                    image 'in92/devops_pyunit:v1.0' 
                    }
            }

            steps {
                sh 'python project/3_CI_CD/3_unit_test/unit_test_rforpipeline.py project/3_CI_CD/3_unit_test/rfor_pipeline.pickle project/3_CI_CD/3_unit_test/test.csv result.csv'
            }

            post {

                success {
                        echo 'Score code file successfully passed Unit Test!'
                    }

                failure {
                        echo 'Code failed the Unit test, please see logs.'
                    }
            }

        }

        stage('Integration test') {

            parallel{

                stage('Run Scoring container'){

                    agent { label 'docker' }

                    steps{

                        script{
                            docker.image('in92/devops_score_sidecar:v1.0').withRun('-p 8188:8080') {container ->
                                docker.image('in92/devops_test_exec:v1.0').inside("--link ${container.id}:test_score") {
                                    sh 'python --version '
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Model MetaData Quality Test') {

            parallel {

                stage('Validate inputVar.json file') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/inputVar.json"
                    }
                }

                stage('Validate outputVar.json file') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/outputVar.json"
                    }

                }

                stage('Validate fileMetadata.json file') {

                    agent {
                        docker {
                            image 'python:3-alpine' 
                        }
                    }

                    steps {
                        sh "python -c 'import sys,json; json.load(sys.stdin)' < project/2_DevLab/experiment_rfor/fileMetadata.json"
                    }

                }
            }

            post {

                success {
                        echo 'Model MetaData files successfully validated!'
                    }

                failure {
                        echo 'Model MetaData files failed the quality test, please see review them.'
                    }
            }
        }
            // stage('SAS Model Manager Repository service') {
        // }
    }
}